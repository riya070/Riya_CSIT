class Solution {
    public List<List<Integer>> threeSum(int[] nums) {

        Arrays.sort(nums);
        List<List<Integer>> triplets = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (i != 0 && nums[i] == nums[i - 1]) continue;
            searchTriplets(i + 1, -nums[i], nums, triplets);
        }
        return triplets;
    }

    private void searchTriplets(int idx, int target, int[] nums, List<List<Integer>> triplets) {
        int left = idx;
        int right = nums.length - 1;
        while (left < right) {
            int sum = nums[left] + nums[right];
            if (sum == target) {
                triplets.add(List.of(-target, nums[left], nums[right]));
                left += 1;
                right -= 1;
                while (left < right) {
                    if (nums[left] == nums[left - 1]) left += 1;
                    else if (nums[right] == nums[right + 1]) right -= 1;
                    else break;
                }
            }
            else if (sum < target) left += 1;
            else right -= 1;
        }
    }
}
